<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="15" time="747.012" timestamp="2023-07-11T11:19:57.139938" hostname="dnalbtswnops14"><testcase classname="tests.test_Stage.TestSmoke" name="test_login_hm" time="19.477" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CreateNewhire" time="93.136" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CompleteObStartTask" time="27.509" /><testcase classname="tests.test_Stage.TestSmoke" name="test_Admin" time="39.552" /><testcase classname="tests.test_Stage.TestSmoke" name="test_resetPassword" time="116.365" /><testcase classname="tests.test_Stage.TestSmoke" name="test_login_nh" time="19.628" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CompleteNoForm" time="35.575" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CompleteDirectCredit" time="63.462" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CompleteConflictInterest" time="74.983" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CompleteW4Task" time="79.845" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CompleteI9Section1Task" time="78.217" /><testcase classname="tests.test_Stage.TestSmoke" name="test_Logout_NH" time="25.097" /><testcase classname="tests.test_Stage.TestSmoke" name="test_Relogin_hmandSearchNewhire" time="48.899" /><testcase classname="tests.test_Stage.TestSmoke" name="test_CompleteSection2" time="0.020"><failure message="selenium.common.exceptions.ElementClickInterceptedException: Message: Element &lt;a class=&quot;ob-link&quot; href=&quot;&quot;&gt; is not clickable at point (129,337) because another element &lt;div class=&quot;side-navigation collapse-side-nav&quot;&gt; obscures it&#10;Stacktrace:&#10;WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:186:5&#10;ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:285:5&#10;webdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11&#10;interaction.clickElement@chrome://remote/content/marionette/interaction.js:125:11&#10;clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:203:24&#10;receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31">self = &lt;test_Stage.TestSmoke object at 0x000001F804976C90&gt;

    def test_CompleteSection2(self):
        ts = TestStatus(self.driver)
        myTasks = MyTasksPage(self.driver)
        i9sec2 = I9Section2Page(self.driver)
        ts.mark("Pass", "User is navigated to Onboard Task page")
&gt;       myTasks.clickTask("I-9 Section 2")

tests\test_Stage.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\hm\MyTasksPage.py:32: in clickTask
    task_name.click()
C:\Users\vevadapa\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\remote\webelement.py:93: in click
    self._execute(Command.CLICK_ELEMENT)
C:\Users\vevadapa\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\remote\webelement.py:410: in _execute
    return self._parent.execute(command, params)
C:\Users\vevadapa\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\remote\webdriver.py:444: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F8047B2850&gt;
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"Element &lt;a class=\\"ob-link\\" href...dsChild.jsm:203:24\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = "{}.{}".format(frame["className"], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: Element &lt;a class="ob-link" href=""&gt; is not clickable at point (129,337) because another element &lt;div class="side-navigation collapse-side-nav"&gt; obscures it
E       Stacktrace:
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:186:5
E       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:285:5
E       webdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11
E       interaction.clickElement@chrome://remote/content/marionette/interaction.js:125:11
E       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:203:24
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31

C:\Users\vevadapa\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:249: ElementClickInterceptedException</failure></testcase><testcase classname="tests.test_Stage.TestSmoke" name="test_Logout_HM" time="24.293" /></testsuite></testsuites>